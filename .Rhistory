library(dplyr)
library(dplyr)
data("mtcars")
mtcars_filtrado <- mtcars %>% filter(cyl == 6, hp > 10)
print(head(mtcars))
library(dplyr)
data("mtcars")
mtcars_filtrado <- mtcars %>% filter(cyl == 6, hp > 100)
print(head(mtcars))
library(dplyr)
data("AirPassengers")
data("Iris")
data("iris")
library(dplyr)
data("iris")
iris_busqueda <- select(Sepal.Length , Species)
data("iris")
iris_busqueda <- iris %>% select(Sepal.Length , Species)
print(head(iris_busqueda))
library(dplyr)
data("airquality")
airquality_name <- airquality %>% arrange(temp)
data("airquality")
airquality
library(dplyr)
data("airquality")
airquality_ord_name <- airquality %>% arrange(temp)
ibrary(dplyr)
library(dplyr)
data("airquality")
airquality_ord_name <- airquality %>% arrange(Temp)
print(head(airquality_ord_name))
library(dplyr)
data("airquality")
airquality_ord_name <- airquality %>% arrange(Day)
print(head(airquality_ord_name))
library(dplyr)
iris_ord_asc <- iris %>% arrange(Sepal.Length)
print(head(iris_ord_asc))
iris
mrcarsa
library(dplyr)
mtcars
library(dplyr)
data("mtcars")
mtcars_cambiar <- mtcars %>% rename(metros_por_hora = mpg, caballos_fuerza =hp)
print(head(mtcars_cambiar))
library(dplyr)
data("mtcars")
mtcars_cambiar <- mtcars %>% rename(hora = mpg, vida =hp)
print(head(mtcars_cambiar))
library(dplyr)
data("mtcars")
mtcars_cambiar <- mtcars %>% rename(hora = mpg, vida =hp)
print(head(mtcars_cambiar))
mtcars_cambiar <- mtcars %>% arrange(mpg,vida)
mtcars_cambiar <- mtcars %>% arrange(mpg,vida)
mtcars_cambiar <- mtcars %>% arrange(hora = mpg,vida = hp)
print(head(mtcars_cambiar))
mtcars_cambiar <- mtcars %>% arrange(mpg = hora,hp = vida)
library(dplyr)
data("mtcars")
mtcars_cambiar <- mtcars %>% rename(hora = mpg, vida =hp)
print(head(mtcars_cambiar))
mtcars_cambiar <- mtcars %>% arrange(mpg = hora,hp = vida)
library(dplyr)
data("mtcars")
mtcars_cambiar <- mtcars %>% rename(hora = mpg, vida = hp)
print(head(mtcars_cambiar))
mtcars_cambiar <- mtcars %>% arrange(hora = mpg,vida = hp)
print(head(mtcars_cambiar))
library(dplyr)
data("mtcars")
mtcars_cambiar <- mtcars %>% rename(hora = mpg, vida = hp)
print(head(mtcars_cambiar))
library(dplyr)
data("mtcars")
mtcars_cambiar <- mtcars %>% rename(hora = mpg, vida = hp)
print(head(mtcars_cambiar))
mtcars_cambiar <- mtcars %>% arrange(hora = mpg,vida = hp)
print(head(mtcars_cambiar))
Titanic
data()
data(package(all.avaliable = TRUE))
library(dplyr)
data("AirPassengers")
library(dplyr)
data("CO2")
library(dplyr)
data("airquality")
library(dplyr)
data("CO2")
force(airquality)
force(AirPassengers)
library(dplyr)
data("AirPassengers")
force(AirPassengers)
library(dplyr)
data("AirPassengers")
AirPassengers_ord_enero <- AirPassengers %>% arrange(jan)
data("AirPassengers")
AirPassengers_ord_enero <- AirPassengers %>% arrange(jan)
library(AirPassengers)
library(AirPassengers)
library(dplyr)
data("AirPassengers")
AirPassengers_ord_name <- AirPassengers %>% arrange(jan)
library(dplyr)
data("airquality")
airquality_ord_name <- airquality %>% arrange(Day)
print(head(airquality_ord_name))
library(tibble)
library(dplyr)
library(tibble)
data("AirPassengers")
AirPassengers_ord_name <- AirPassengers %>% arrange(jan)
# Cargar bibliotecas necesarias
library(dplyr)
library(tibble)  # Para convertir la serie temporal a tibble
# Cargar el dataset (viene con base R)
data("AirPassengers")
# Convertir a data frame con columnas: año, mes, valor, y 'jan' (solo para enero)
AirPassengers_df <- tibble(
value = as.numeric(AirPassengers),  # Valores de pasajeros
time = time(AirPassengers)          # Índice temporal
) %>%
mutate(
year = floor(time),               # Año (ej. 1949, 1950, etc.)
month_num = ((time - year) * 12) + 1,  # Mes numérico (1=enero, 12=diciembre)
month = month.abb[month_num],     # Mes abreviado (Jan, Feb, etc.)
jan = ifelse(month_num == 1, value, NA_real_)  # 'jan': valor solo si es enero, sino NA
) %>%
select(year, month, month_num, value, jan)  # Columnas relevantes
# Ordenar: primero por 'jan' (descendente, NA al final), luego por año (ascendente)
AirPassengers_ord <- AirPassengers_df %>%
arrange(desc(jan), year)  # desc(jan) pone eneros altos primero; year ordena dentro de NAs
# Imprimir las primeras 20 filas para ver el orden
print(head(AirPassengers_ord, 20))
# Para ver todo el dataset ordenado (opcional, usa View() en RStudio)
# View(AirPassengers_ord)
# Cargar bibliotecas necesarias
library(dplyr)
library(tibble)  # Para convertir la serie temporal a tibble
# Cargar el dataset (viene con base R)
data("AirPassengers")
# Convertir a data frame con columnas: año, mes, valor, y 'jan' (solo para enero)
AirPassengers_df <- tibble(
value = as.numeric(AirPassengers),  # Valores de pasajeros
time = time(AirPassengers)          # Índice temporal
) %>%
mutate(
year = floor(time),               # Año (ej. 1949, 1950, etc.)
month_num = ((time - year) * 12) + 1,  # Mes numérico (1=enero, 12=diciembre)
month = month.abb[month_num],     # Mes abreviado (Jan, Feb, etc.)
jan = ifelse(month_num == 1, value, NA_real_)  # 'jan': valor solo si es enero, sino NA
) %>%
select(year, month, month_num, value, jan, Feb)  # Columnas relevantes
setwd("~/")
setwd("~/GitHub/Repositorio-Titanic-Dataset")
